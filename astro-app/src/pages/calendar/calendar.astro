---
import Footer from '../../components/Footer.astro';
import '../../styles/calendar.css';
import '../../styles/components/footer.css';
---
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Calendrier - Sorrel</title>
</head>
<body>
  <div class="container">
    <header class="heading" aria-live="polite">
      <div class="title">Calendrier de la semaine</div>
      <div class="subtitle">Semaine en cours (mise √† jour automatique)</div>
    </header>

    <section class="calendar-card" aria-label="Calendrier hebdomadaire">
      <div class="toolbar">
        <div class="range" id="weekRange" aria-live="polite">Semaine ‚Ä¶</div>
        <div class="controls" role="group" aria-label="Contr√¥les de navigation">
          <button class="btn" id="prevWeek" aria-label="Semaine pr√©c√©dente">‚óÄ Semaine -1</button>
          <button class="btn" id="todayBtn" aria-label="Revenir √† cette semaine">Aujourd‚Äôhui</button>
          <button class="btn" id="nextWeek" aria-label="Semaine suivante">Semaine +1 ‚ñ∂</button>
        </div>
      </div>

      <div class="week-grid" id="weekGrid">
        <div class="corner" aria-hidden="true"></div>
        <div class="day-header" data-day="1"></div>
        <div class="day-header" data-day="2"></div>
        <div class="day-header" data-day="3"></div>
        <div class="day-header" data-day="4"></div>
        <div class="day-header" data-day="5"></div>
        <div class="day-header" data-day="6"></div>
        <div class="day-header" data-day="0"></div>
        <!-- Slots inject√©s par JS -->
      </div>

      <div class="now-line" id="nowLine" aria-hidden="true"></div>
    </section>

    <Footer />
</div>

<script is:inline>
(() => {  
  const SEGMENTS = [
    { key:'morning',   label:'Matin',        start:6,  end:12 },
    { key:'noon',      label:'Midi',         start:12, end:15 },
    { key:'afternoon', label:'Apr√®s-midi',   start:15, end:18 },
    { key:'evening',   label:'Soir',         start:18, end:23 },
  ];
  const ROW_HEIGHT    = 80;
  const HEADER_HEIGHT = 56;

  const grid    = document.getElementById('weekGrid');
  const rangeEl = document.getElementById('weekRange');
  const nowLine = document.getElementById('nowLine');

  const prevBtn = document.getElementById('prevWeek');
  const nextBtn = document.getElementById('nextWeek');
  const todayBtn = document.getElementById('todayBtn');

  let weekOffset = 0;
  let currentMonday = null;
  let currentSunday = null;



  const cloneDate = (d)=> new Date(d.getTime());
  function getMonday(d){
    const date = cloneDate(d);
    const day = date.getDay(); // 0=dim, 1=lun
    const diff = (day === 0 ? -6 : 1 - day);
    date.setDate(date.getDate() + diff);
    date.setHours(0,0,0,0);
    return date;
  }
  const addDays = (d,n)=> { const x = new Date(d.getTime()); x.setDate(x.getDate()+n); return x; };
  const sameDay = (a,b)=> a.getFullYear()===b.getFullYear() && a.getMonth()===b.getMonth() && a.getDate()===b.getDate();
  const fmtHdr  = (d)=> d.toLocaleDateString('fr-FR',{ weekday:'short', day:'2-digit', month:'2-digit' }).replace('.', '');

  function buildGrid(){
    console.log('[calendar] buildGrid()');
    // Vide tout sauf les 8 premi√®res cases (coin + 7 en-t√™tes)
    while (grid.children.length > 8) grid.removeChild(grid.lastElementChild);

    // Colonne des segments + 7 colonnes de jours
    for (let i = 0; i < SEGMENTS.length; i++){
      const segCell = document.createElement('div');
      segCell.className = 'hour-cell';
      segCell.textContent = SEGMENTS[i].label;
      grid.appendChild(segCell);

      for (let c = 0; c < 7; c++){
        const slot = document.createElement('div');
        slot.className = 'slot';
        slot.dataset.segment = SEGMENTS[i].key;
        slot.dataset.segIdx  = String(i);
        slot.dataset.col     = String(c); // 0=lundi ‚Ä¶ 6=dimanche
        grid.appendChild(slot);
      }
    }
  }

function renderWeek(offset=0){
    const base   = new Date();
    base.setDate(base.getDate() + offset*7);
    currentMonday = getMonday(base);
    currentSunday = addDays(currentMonday, 6);

    const today  = new Date();
    const fmt = (d)=> d.toLocaleDateString('fr-FR',{ day:'2-digit', month:'long', year:'numeric' });
    rangeEl.innerHTML = `<small>Du</small> ${fmt(currentMonday)} <small>au</small> ${fmt(currentSunday)}`;

    const headers = grid.querySelectorAll('.day-header');
    headers.forEach((h, idx) => {
      const date = addDays(currentMonday, idx);
      h.textContent = fmtHdr(date);
      h.classList.toggle('today',
        date.getFullYear()===today.getFullYear() &&
        date.getMonth()===today.getMonth() &&
        date.getDate()===today.getDate() &&
        offset === 0
      );
    });

    positionNowLine(currentMonday, currentSunday);
  }


  function isWithinWeek(date, weekStart, weekEnd){
    const endExclusive = new Date(weekEnd.getTime()); endExclusive.setDate(endExclusive.getDate()+1);
    return date >= weekStart && date < endExclusive;
  }

  function positionNowLine(weekStart, weekEnd){
    const now = new Date();
    const inWeek = now >= weekStart && now <= new Date(weekEnd.getTime()+86400000-1);
    if (!inWeek){ nowLine.style.display='none'; return; }

    const h = now.getHours(), m = now.getMinutes();
    const segIdx = SEGMENTS.findIndex(s => h >= s.start && h < s.end);
    if (segIdx === -1){ nowLine.style.display='none'; return; }

    nowLine.style.display='block';
    const seg = SEGMENTS[segIdx];
    const segLengthMin   = (seg.end - seg.start) * 60;
    const minutesIntoSeg = (h - seg.start) * 60 + m;
    const progress       = Math.max(0, Math.min(1, minutesIntoSeg / segLengthMin));
    const y = HEADER_HEIGHT + segIdx * ROW_HEIGHT + progress * ROW_HEIGHT;
    nowLine.style.setProperty('--pos', y + 'px');
  }

function placeEvent({ dayIndex, segmentKey, title }) {
  const segIdx = SEGMENTS.findIndex(s => s.key === segmentKey);
  if (segIdx === -1) return;
  const slot = grid.querySelector(`.slot[data-seg-idx="${segIdx}"][data-col="${dayIndex}"]`);
  if (!slot) return;

  // -- cr√©er le nouvel √©l√©ment (pilule) --
  const el = document.createElement('div');
  el.className = 'event';
  el.setAttribute('role','note');
  el.setAttribute('aria-label', title || '√âv√©nement');

  // (ton SVG pilule)
  function pillIconSVG({
    w = 18, h = 18,
    left = '#22c55e',
    right = '#38bdf8',
    sep = '#ffffff',
    outline = '#ffffff'
  } = {}) {
    return `
<svg width="${w}" height="${h}" viewBox="0 0 64 64" aria-hidden="true" focusable="false">
  <defs>
    <linearGradient id="pillLeft" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0" stop-color="${left}" stop-opacity="1"/>
      <stop offset="1" stop-color="${left}" stop-opacity=".85"/>
    </linearGradient>
    <linearGradient id="pillRight" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0" stop-color="${right}" stop-opacity="1"/>
      <stop offset="1" stop-color="${right}" stop-opacity=".85"/>
    </linearGradient>
    <clipPath id="pillClip">
      <rect x="2" y="10" width="60" height="44" rx="22" ry="22"/>
    </clipPath>
    <filter id="softShadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="1.5" stdDeviation="1.5" flood-opacity=".25"/>
    </filter>
  </defs>
  <g filter="url(#softShadow)">
    <g clip-path="url(#pillClip)">
      <rect x="2"  y="10" width="30" height="44" fill="url(#pillLeft)"/>
      <rect x="32" y="10" width="30" height="44" fill="url(#pillRight)"/>
      <path d="M2,18 C18,8 46,8 62,18 L62,26 C46,16 18,16 2,26 Z" fill="#fff" opacity=".18"/>
    </g>
    <line x1="32" y1="12" x2="32" y2="52" stroke="${sep}" stroke-width="2" opacity=".95"/>
    <rect x="2" y="10" width="60" height="44" rx="22" ry="22" fill="none" stroke="${outline}" stroke-width="2" opacity=".9"/>
  </g>
</svg>`;
  }

  el.innerHTML = pillIconSVG({ w: 18, h: 18 }) + '<span class="label"></span>';
  el.querySelector('.label').textContent = title || '√âv√©nement';
  slot.appendChild(el);

  // -- r√©partir verticalement tous les events du slot --
  const events = Array.from(slot.querySelectorAll('.event'));
  const GAP = 6;                       // espace entre pilules
  const PAD = 8;                       // marge haute/basse
  const available = 80 - PAD * 2;      // 80 = ROW_HEIGHT
  const n = events.length;

  // hauteur dynamique pour que tout tienne dans la ligne (min 22px)
  const height = Math.max(22, Math.floor((available - GAP * (n - 1)) / n));

  events.forEach((ev, i) => {
    const top = PAD + i * (height + GAP);
    ev.style.setProperty('--top', `${top}px`);
    ev.style.setProperty('--height', `${height}px`);
  });
}


   async function loadEvents() {
    const url = "http://localhost:8080/calendar/events";
    try {
      const res = await fetch(url, { credentials: "include" });
      if (!res.ok) return;

      const json   = await res.json();
      const events = Array.isArray(json) ? json : (json.events || json.data || []);

      // Nettoie l‚Äôexistant
      grid.querySelectorAll('.slot .event').forEach(el => el.remove());

      // üëâ Filtre par semaine affich√©e
      const filtered = events.filter(ev => {
        const d = new Date(ev.start_dt);
        return isWithinWeek(d, currentMonday, currentSunday);
      });

      filtered.forEach(ev => {
        const d = new Date(ev.start_dt);
        const dayIndex = (d.getDay() + 6) % 7; // 0=lun‚Ä¶6=dim
        const h = d.getHours();
        let segmentKey = 'morning';
        if      (h >= 12 && h < 15) segmentKey = 'noon';
        else if (h >= 15 && h < 18) segmentKey = 'afternoon';
        else if (h >= 18)           segmentKey = 'evening';
        placeEvent({ dayIndex, segmentKey, title: ev.title || '√âv√©nement' });
      });
    } catch (e) {
      console.error("Erreur loadEvents:", e);
    }
  }
  // ---- INIT UNIQUE
  buildGrid();
  renderWeek(weekOffset);
  loadEvents();

  // Navigation
  prevBtn.addEventListener('click', ()=>{ weekOffset--; renderWeek(weekOffset); loadEvents(); });
  nextBtn.addEventListener('click', ()=>{ weekOffset++; renderWeek(weekOffset); loadEvents(); });
  todayBtn.addEventListener('click', ()=>{ weekOffset=0; renderWeek(weekOffset); loadEvents(); });

  // Now-line update
  setInterval(()=>{
    const base = new Date();
    base.setDate(base.getDate() + weekOffset*7);
    const monday = getMonday(base);
    const sunday = addDays(monday, 6);
    positionNowLine(monday, sunday);
  }, 60000);
})();


</script>
</body>
